<!-- question-type: inclass -->
### Exercise 3: Tidying and Unlocking Scalable Insights

**(a)**. We'll now tidy the messy stock price dataset from Exercise 1 so we can more easily analyse and visualise it. Use the starter code below to turn your wide-format data back into a tidy format using `pivot_longer()`.

```{r}
#| eval: false
asx_prices_tidy <- 
    asx_prices_messy |>
    pivot_longer(
        cols = YOUR_CODE_HERE,
        names_to = c(".value", "fyear"),
        names_sep = YOUR_CODE_HERE,
        values_drop_na = TRUE
    ) |>
    mutate(fyear = as.numeric(fyear))

asx_prices_tidy |> 
    head(10)
```

**(b)**. Why is this structure better for analysis?
Why might calculations or visualisations now be easier?

**(c)**. Let's re-do a simple tasks from Exercise 1, that was quite complicated to implement ‚Äî and see how much easier it is now that our data is tidy. What's the average share price for all firms across 2023 and 2024?

```{r}
#| eval: false
asx_prices_tidy |>
    YOUR_CODE(fyear %in% c(YOUR_YEARS)) |>
    YOUR_CODE(avg_price = mean(YOUR_VARIABLE, na.rm = TRUE))
```

**(d)**. Let's re-do our plot from Exercise 1 too. Plot price vs EPS over the full sample (2019‚Äì2024). 

**(e)**. Suppose we wanted to modify the plot in (d) to only include the years 2023 and 2024. Modify the code you just wrote to make this change by adding one new line of code.

**(f)**. What kind of relationship do you observe in the plot in (d)?
What might explain firms that lie above or below the fitted line? For EPS < 0, does our line-of-best-fit 'make sense'?


<!-- BEGIN PROFILE:r-teaching-guide -->
::: {.content-visible when-profile="r-teaching-guide"}

::: {.teaching-block}

::: {.teaching-block-header}
Teaching Note
:::

::: {.teaching-block-body}

üéØ **Learning Objective** 
Students should:

- Practise reshaping wide, messy data into tidy format with `pivot_longer()`.

- Recognize how tidy data simplifies summarisation, filtering, and plotting.

- Understand how tidy structures make code scalable as more years or variables are added.

‚úÖ   **Core Concepts to Highlight**

Pivoting: `pivot_longer()` reduces repetitive columns into variables + identifiers.

Tidy structure: one variable per column, one observation per row, one value per cell.

Scalability: tidy data lets you write code once and apply it across all years/variables.


üí¨ **Suggested In-Class Prompts**

*‚ÄúHow many lines of code did we save compared to Exercise 1?‚Äù*

*‚ÄúIf we had 10 more years of data, what would change in this tidy approach?‚Äù*

*‚ÄúWhy does ggplot feel more natural to use with tidy data?‚Äù*

üìå **Common Misunderstandings**

Believing `pivot_longer()` just rearranges data for style, not realizing it enables new analyses.

Forgetting to convert year strings into numeric (`fyear`) for filtering/plotting.

Expecting a linear fit to make sense even when EPS < 0 (a modeling issue, not a tidying issue).

:::

:::

:::
<!-- END PROFILE:r-teaching-guide -->

<!-- BEGIN PROFILE:r-solutions -->
::: {.content-visible when-profile="r-solutions" when-profile="r-teaching-guide"}

::: {.solution-block}

::: {.solution-block-header}
Solution
:::

::: {.solution-block-body}

**(a).**

```{r}
asx_prices_tidy <- 
    asx_prices_messy |>
    pivot_longer(
        cols = starts_with("price") | starts_with("eps"),
        names_to = c(".value", "fyear"),
        names_sep = "_",
        values_drop_na = TRUE
    ) |>
    mutate(fyear = as.numeric(fyear))

asx_prices_tidy |> 
  head(10)
```

**(b). **

This tidy format stores each variable in a separate column and each observation in a separate row. As a result:

* It‚Äôs easier to filter by year, firm, or variable.
* We can summarise or group by year without repeating code.
* Functions like `group_by()`, `summarise()`, and `ggplot()` work more naturally.
* The structure scales with more years or variables (we only need to look down longer and longer columns, rather than down *and* across more and more rows as was the case in Exercise 1).

**(c).**

```{r}
asx_prices_tidy |>
    filter(fyear %in% c(2023, 2024)) |>
    summarise(avg_price = mean(price, na.rm = TRUE))
```

Why is it easier now?

* No need to reference column names like price_2023 or price_2024 individually. One `filter()` and one `mean()` get the job done ‚Äî even if more years are added later.

**(d).** 

```{r}
#| warning: false

asx_prices_tidy |>
    filter(eps > -5) |>
    ggplot(aes(x = eps, y = price)) +
    geom_point(alpha = 0.4) +
    geom_smooth(method = "lm", color = "blue") +
    labs(
        title = "Share Price vs EPS (2019‚Äì2024)",
        x = "Earnings per Share",
        y = "Share Price"
    ) +
    theme_minimal()
```

**(e)**. 

```{r}
#| warning: false

asx_prices_tidy |>
    filter(eps > -5) |> 
    filter(fyear %in% c(2023, 2024)) |>
    ggplot(aes(x = eps, y = price)) +
    geom_point(alpha = 0.4) +
    geom_smooth(method = "lm", color = "blue") +
    labs(
        title = "Share Price vs EPS (2023‚Äì2024)",
        x = "Earnings per Share",
        y = "Share Price"
    ) +
    theme_minimal()
```

**(f)**.

EPS vs Share Price

* There is a positive relationship between earnings per share (EPS) and share price.
* Firms with higher EPS generally have higher prices ‚Äî which makes sense, as investors are willing to pay more for firms that earn more per share.

Points above the line may reflect:

* High investor confidence or hype
* Intangible value not reflected in current EPS (e.g., growth potential)

Points below the line may reflect:

* Low investor confidence
* Risk, declining growth, or negative sentiment

For EPS < 0:

* Expected share price based on our line-of-best-fit is negative. This implies that owners firms where EPS < 0 would pay to sell their stock in these firms. 
* Economically, this does not make sense but it occurs because we are imposing a straight line model on our data when a non-linear model is likely a much better assumption. Trying fitting such a model instead (it does better, but doesn't quite address the issue)...

```{r}
#| warning: false

asx_prices_tidy |>
  filter(eps > -5) |> 
  filter(fyear %in% c(2023, 2024)) |> 
  ggplot(aes(x = eps, y = price)) +
  geom_point(alpha = 0.4) +
  geom_smooth(
    method = "lm",
    formula = y ~ poly(x, 2),   # quadratic fit
    color = "blue"
  ) +
  labs(
    title = "Share Price vs EPS (2023‚Äì2024)",
    x = "Earnings per Share",
    y = "Share Price"
  ) +
  theme_minimal()
```


:::

:::

:::
<!-- END PROFILE:r-solutions -->